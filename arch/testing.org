** Testing
Go makes testing easier than other languages in some ways, and harder in
others. Testing is built into the language, which is great! However, all you get
is the somewhat barebones ( but still _awesome_ ) =testing= package.

So, because testing is built into the language, we should use it.

For example, this means that your initial response when given either a bug to
fix or a feature to implement, should be to write a failing test first. But once
you’ve fixed the bug or added the feature you have the test case to prove it
works, and you check them in together.

Let's talk about how to write tests in Go, and some ways to make them easier and
cleaner to write and maintain.

The first thing to note before we continue though, is this:

*Tests lock in behaviour.*

Unit tests at the package level should lock in the behaviour of the package’s
API. They describe, in code, what the package promises to do.

If there is a unit test for each input permutation, you have defined the
contract for what the code will do in code, not documentation. This is a
contract you can assert as simply as typing go test. At any stage, you can know
with a high degree of confidence, that the behaviour people relied on before
your change continues to function after your changes.

*** Test Test Testing
Let’s say we have a function that splits strings:

#+BEGIN_SRC go
// Split slices s into all substrings separated by sep and
// returns a slice of the substrings between those separators.
func Split(s, sep string) []string {
    var result []string
    i := strings.Index(s, sep)
    for i > -1 {
        result = append(result, s[:i])
        s = s[i+len(sep):]
        i = strings.Index(s, sep)
    }
    return append(result, s)
}
#+END_SRC

In Go, unit tests are just regular Go functions (with a few rules) so we write a
unit test for this function starting with a file in the same directory, with the
same package name, =strings=.

#+BEGIN_SRC go
package split

import (
    "reflect"
    "testing"
)

func TestSplit(t *testing.T) {
    got := Split("a/b/c", "/")
    want := []string{"a", "b", "c"}
    if !reflect.DeepEqual(want, got) {
         t.Fatalf("expected: %v, got: %v", want, got)
    }
}
#+END_SRC

Tests are just regular Go functions with a few rules:

 - The name of the test function must start with Test.
 - The test function must take one argument of type =*testing.T=. A =*testing.T= is
   a type injected by the testing package itself, to provide ways to print,
   skip, and fail the test.

In our test we call =Split= with some inputs, then compare it to the result we
expected.

**** Going beyond 100% coverage

So, we wrote one test case, got 100% coverage, but this isn’t really the end of
the story. We have good branch coverage but we probably need to test some of the
boundary conditions. For example, what happens if we try to split it on comma?

#+BEGIN_SRC go
func TestSplitWrongSep(t *testing.T) {
    got := Split("a/b/c", ",")
    want := []string{"a/b/c"}
    if !reflect.DeepEqual(want, got) {
        t.Fatalf("expected: %v, got: %v", want, got)
    }
}
#+END_SRC

Or, what happens if there are no separators in the source string?

#+BEGIN_SRC go
func TestSplitNoSep(t *testing.T) {
    got := Split("abc", "/")
    want := []string{"abc"}
    if !reflect.DeepEqual(want, got) {
        t.Fatalf("expected: %v, got: %v", want, got)
    }
}
#+END_SRC

We’re starting build a set of test cases that exercise boundary conditions. This
is good.

**** Introducing table driven tests

However the there is a lot of duplication in our tests. For each test case only
the input, the expected output, and name of the test case change. Everything
else is boilerplate. What we’d like to to set up all the inputs and expected
outputs and feel them to a single test harness. This is a great time to
introduce table driven testing.

#+BEGIN_SRC go
  func TestSplit(t *testing.T) {
    type test struct {
      input string
      sep   string
      want  []string
    }

    tests := map[string]test{
      "normal": {input: "a/b/c", sep: "/", want: []string{"a", "b", "c"}},
      "comma separator": {input: "a/b/c", sep: ",", want: []string{"a/b/c"}},
      "no separator": {input: "abc", sep: "/", want: []string{"abc"}},
    }

    for name, xx := range tests {
      tc := xx
      t.Run(name, func(t *testing.T){
        got := Split(tc.input, tc.sep)
        if !reflect.DeepEqual(tc.want, got) {
          t.Fatalf("expected: %v, got: %v", tc.want, got)
        }
      }
    }
  }
#+END_SRC

We declare a structure to hold our test inputs and expected outputs. This is our
table. The tests structure is usually a local declaration because we want to
reuse this name for other tests in this package.

In fact, we don’t even need to give the type a name, we can use an anonymous
struct literal to reduce the boilerplate like this:

#+BEGIN_SRC go
func TestSplit(t *testing.T) {
    tests := map[string]struct {
        input string
        sep   string
        want  []string
    }{
        {input: "a/b/c", sep: "/", want: []string{"a", "b", "c"}},
        {input: "a/b/c", sep: ",", want: []string{"a/b/c"}},
        {input: "abc", sep: "/", want: []string{"abc"}},
    } 

    for name, xx := range tests {
    tc := xx
        t.Run(name, func(t *testing.T) {
            got := Split(tc.input, tc.sep)
            if !reflect.DeepEqual(tc.want, got) {
                t.Fatalf("expected: %v, got: %v", tc.want, got)
            }
        })
    }
}
#+END_SRC

Now, adding a new test is a straight forward matter; simply add another line the
tests structure. For example, what will happen if our input string has a
trailing separator?

#+BEGIN_SRC go
{input: "a/b/c", sep: "/", want: []string{"a", "b", "c"}},
{input: "a/b/c", sep: ",", want: []string{"a/b/c"}},
{input: "abc", sep: "/", want: []string{"abc"}},
{input: "a/b/c/", sep: "/", want: []string{"a", "b", "c"}}, // trailing sep
#+END_SRC

Also, because each sub test now has a name we get that name automatically printed out in any test runs.

#+BEGIN_SRC
% go test
--- FAIL: TestSplit (0.00s)
    --- FAIL: TestSplit/trailing_sep (0.00s)
        split_test.go:25: expected: [a b c], got: [a b c ]
#+END_SRC

Each subtest is its own anonymous function, therefore we can use =t.Fatalf=,
=t.Skipf=, and all the other =testing.Thelpers=, while retaining the compactness of
a table driven test.

**** Individual sub test cases can be executed directly

Because sub tests have a name, you can run a selection of sub tests by name using the go test -run flag.

#+BEGIN_SRC
% go test -run=.*/trailing -v
=== RUN   TestSplit
=== RUN   TestSplit/trailing_sep
--- FAIL: TestSplit (0.00s)
    --- FAIL: TestSplit/trailing_sep (0.00s)
        split_test.go:25: expected: [a b c], got: [a b c ]
#+END_SRC

**** Table Driven Testing++
So one improvement I stumbled upon recently is this:

Don't store the table of test cases within the test itself; put them in a JSON
file in that package's =testdata= folder.

What this means is that you replace all the lines like this:

#+BEGIN_SRC go
        {input: "a/b/c", sep: "/", want: []string{"a", "b", "c"}},
        {input: "a/b/c", sep: ",", want: []string{"a/b/c"}},
        {input: "abc", sep: "/", want: []string{"abc"}},
#+END_SRC

With something like this:

#+BEGIN_SRC go
helpers.LoadTestData(t, "split-table.json", &tests)
#+END_SRC

That's a helper function that does something like this:

#+BEGIN_SRC go
  // LoadTestData expects that 'file' points to a JSON file. It will open and read
  // that file, and then unmarshal the JSON into 'val'.
  func LoadTestData(t *testing.T, file string, val any) {
    t.Helper()

    file = fmt.Sprintf("testdata/%v", file)

    f, err := os.OpenFile(file, os.O_RDONLY, fileMode)
    if err != nil {
      t.Errorf("unable to open testing data file '%v', reason: %v", file, err)
      t.FailNow()
    }

    bits, err := io.ReadAll(f)
    if err != nil {
      t.Errorf("unable to read testing data from file '%v', reason: %v", file, err)
      t.FailNow()
    }

    err = json.Unmarshal(bits, val)
    if err != nil {
      t.Errorf("unable to unmarshal data from file '%v' into value: %v", file, err)
      t.FailNow()
    }
  }
#+END_SRC

Now you can have a test with tens or hundreds of test cases and your actual test
files aren't 90% tables.

One thing that this can't do is allow you to define functions as part of your
test table; I'm still pondering how to solve that.

*** Benchmarks                                                   :noexport:
https://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go

*** Examples                                                     :noexport:
 

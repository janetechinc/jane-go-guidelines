# -*- mode: org; -*-
#+TITLE: Jane Go Guidelines
#+SUBTITLE: Recommended Best Practices & Style For Go Code
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.0.50 (Org mode 9.4.4)
#+OPTIONS: \n:nil ^:nil toc:t H:5
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://fniessen.github.io/org-html-themes/src/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://fniessen.github.io/org-html-themes/src/readtheorg_theme/js/readtheorg.js"></script>

* Introductions
#+INCLUDE: "intro/base.org"

* Guiding Principles
#+INCLUDE: "intro/principles.org"

* Style & Syntax
This section is heavy on guidelines, light on prescriptive rules. The reason is
that what constitutes "a good name" or "enough documentation" is highly
subjective -- but we can draw some boundaries around what we all find
acceptable.

Additionally, there are many tools that we should be able to use to enforce the
rough boundaries of these guidelines for us. This would mean being able to fix
our code before anybody else ever sees it.

The same way that =gofmt= eliminated the arguments over tabs vs spaces, we can (
and should! ) use other tools to enforce the kind of style guidelines we talk
about here.

#+INCLUDE: "style/identifiers.org"
#+INCLUDE: "style/commentary.org"

* Using Go Features
In this section we're going to start talking about some guidelines that are
slightly more prescriptive than the ones in the previous section. These
guidelines are ones that shouldn't necessarily hold up a code review, but should
be at least marked for further review or clean-up later.

These are the kinds of guidelines that tools such as =go vet= or =golangci-lint=
should be able to help us catch and fix.

#+INCLUDE: "arch/errors.org"
#+INCLUDE: "arch/testing.org"
#+INCLUDE: "arch/concurrency.org"
#+INCLUDE: "arch/logging.org"
#+INCLUDE: "arch/generics.org"

* Architecture
This section we're going to be diving into the most prescriptive set of
guidelines around writing Go code. If you choose to ignore these guidelines,
expect your code to get stuck in review.

#+INCLUDE: "arch/package-design.org"
#+INCLUDE: "arch/project-structure.org"
#+INCLUDE: "arch/api-design.org"

* Apendixes
#+INCLUDE: "notes/error-handling-too-many-behaviours.org"
#+INCLUDE: "notes/simplify-code.org"
#+INCLUDE: "notes/package-interfaces.org"
#+INCLUDE: "notes/ioreader-is-great.org"
#+INCLUDE: "notes/google-vs-amazon.org"
#+INCLUDE: "notes/tips.org"

* Sources
Much of this document comes from articles, presentations, and blog posts from
various authors. This content is used under the 'teaching' clause of fair use
laws; the content being copied is meant to improve a person's understanding of
best practices for writing clean, clear, maintainable Go code.

The content from these sources has been edited so that the whole document has a
consistent style & tense.

The main source is Dave Cheney's 'Practical Go: Real world advice for writing
maintainable Go programs'. However, as there are multiple versions, I've used
parts from all to put this document together.

 - [[https://dave.cheney.net/practical-go/presentations/gophercon-singapore-2019.html][Practical Go, Gophercon Singapore 2019]]
 - [[https://dave.cheney.net/practical-go/presentations/qcon-china.html][Practical Go, QCon Shanghai 2018]]

Other sources:
 - [[https://talks.golang.org/2014/go4gophers.slide][Go for gophers]]
 - [[https://github.com/golang/go/wiki/CodeReviewComments][Go Code Review Comments]] ( From the =golang/go= repo on GitHub )
 - [[https://go.dev/doc/effective_go][Effective Go]]
 - [[https://github.com/uber-go/guide/blob/master/style.md][Uber's Go Styleguide]]
 - [[https://dave.cheney.net/2013/04/30/curious-channels][Curious Channels]], Dave Cheney
 - [[https://www.calhoun.io/pitfalls-of-context-values-and-how-to-avoid-or-mitigate-them/][Pitfalls of context values and how to avoid or mitigate them in Go]], Jon Calhoun
 - [[https://dave.cheney.net/2017/08/20/context-isnt-for-cancellation][Context isn't for cancellation]], Dave Cheney

**  Other Reading/Viewing
This are articles or tutorials that aren't useful in defining a set of best
practices, but are still worth reading.

 - [[https://eli.thegreenplace.net/2019/simple-go-project-layout-with-modules/][Simple Go project layout with modules]] - the only change we'd suggest make is
   moving =clientlib= and =serverlib= into a =lib= folder so you'd have =lib/client= and
   =lib/server= instead ( ie, clarity & strive for one-word package names )
 - [[https://go.dev/blog/pipelines][Go Pipelines]] - a blog post from the Go team on some effective ways to handle
   concurrency /without/ using =context.Context= as a way to signal cancellation
 - [[https://evilmartians.com/chronicles/what-could-go-wrong-with-a-mutex-or-the-go-profiling-story][What could Go wrong with a mutex, or the Go profiling story]] - a good dive
   debugging a deadlock issue
 - [[https://eli.thegreenplace.net/2021/a-comprehensive-guide-to-go-generate/][A comprehensive guide to go generate]] - a deep dive into the =go generate=
   command, and how it can be used
 - [[https://www.youtube.com/watch?v=oV9rvDllKEg][Concurrency is not Parallelism]], a great presentation from Rob Pike
 - [[https://dave.cheney.net/2014/06/27/ice-cream-makers-and-data-races][Ice cream makers and data races]], blog post on data races in Go from Dave
   Cheney

*** Mutexes
 - [[https://www.programming-books.io/essential/go/mutex-gotchas-1c78058100ed4b45aab9461f69c05ecd][Mutex gotchas]]

** unorganized :noexport:
:PROPERTIES:
:ID:       8cfac2e5-452e-439a-833e-64b2546b50ac
:END:

https://go.dev/doc/effective_go

https://github.com/golovers/effective-go

https://the-zen-of-go.netlify.app/

https://hyeomans.com/golang-and-interfaces-misuse/

https://github.com/golang/go/wiki/CodeReviewComments

https://dave.cheney.net/2016/08/20/solid-go-design

https://github.com/ardanlabs/gotraining

https://changelog.com/gotime/200

https://threedots.tech/post/safer-enums-in-go/

https://gronskiy.com/posts/2020-04-golang-pointer-vs-value-methods/
https://stackoverflow.com/questions/27775376/value-receiver-vs-pointer-receiver

https://dave.cheney.net/2016/11/13/do-not-fear-first-class-functions

https://dave.cheney.net/2021/01/05/a-few-bytes-here-a-few-there-pretty-soon-youre-talking-real-memory

https://github.com/dgryski/awesome-go-style

https://dave.cheney.net/2017/08/09/typed-nils-in-go-2

https://go.dev/blog/pipelines

https://www.prakharsrivastav.com/posts/golang-context-and-cancellation/
https://dahernan.github.io/2015/02/04/context-and-cancellation-of-goroutines/

https://rakyll.org/style-packages/

https://eli.thegreenplace.net/2021/a-comprehensive-guide-to-go-generate/

https://www.integralist.co.uk/posts/go-interfaces/
https://eli.thegreenplace.net/2018/beware-of-copying-mutexes-in-go/
https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/

https://blog.gopheracademy.com/advent-2018/postmortem-debugging-delve/


tools:
https://github.com/mvdan/gofumpt

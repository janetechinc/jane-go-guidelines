** Identifiers

Go is not a language that optimizes for clever one liners. It doesn't optimize
for programs with the least number of lines. When we're writing Go, we're not
optimizing for the size of the source code on disk, or how long it takes to type
the program out.

Rather, we want to optimize our code being clear to the reader.

#+BEGIN_QUOTE
Good naming is like a good joke. If you have to explain it, it’s not funny. 

  — Dave Cheney
#+END_QUOTE

Key to this clarity is the names we choose for identifiers in Go code.

So what are some of the qualities of a good name?

 - *A good name is concise.* This doesn't mean that it's as short as possible,
   rather that no space is wasted on extraneous details. Good names have a high
   signal to noise ratio.
 - *A good name is descriptive.* A good name should describe the /application/ of a
   variable or constant, /not/ their contents. A good name should describe the
   /result/ of a function, /not/ the implementation. A good name should describe the
   /purpose/ of a package, /not/ its contents. The better the choice of a name, the
   more accurately it describes the thing it identifies.
 - *A good name should be predictable.* You should be able to infer the way a
   symbol will be used from its name alone. This is a function of choosing
   describe names, but also about following tradition. This is what Go
   programmers talk about when they say /idiomatic/.

Another way to put this is [[https://talks.golang.org/2014/names.slide#3][like this]]: a good name is
 - Consistent (easy to guess)
 - Short (easy to type)
 - Accurate (easy to understand)
 
Okay, that's a good start, but let's talk about this in a bit more depth.

*** Identifier Length
Sometimes people criticise the Go style for recommending short variable
names. As Rob Pike said, "Go programmers want the right length identifiers".

Andrew Gerrand suggests that by using [[https://talks.golang.org/2014/names.slide#4][longer identifies]] to indicate to the
reader things of higher importance.

#+BEGIN_QUOTE
The greater the distance between a name’s declaration and its uses, the longer the name should be. 

  — Andrew Gerrand
#+END_QUOTE

So from this we can draw up some guidelines:

 - Short variable names work well when the distance between their declaration
   and last use is short.
 - Long variable names need to justify themselves; the longer they are the more
   value they need to provide. Lengthy bureaucratic names carry a low amount of
   signal compared to their weight on the page.
 - Don’t include the name of your type in the name of your variable.
 - Constants should describe the value they hold, not how that value is used.
 - Prefer single letter variables for loops and branches, single words for
   parameters and return values, multiple words for functions and package level
   declarations
 - Prefer one word over two, two over three, etc
 - Prefer single words for methods, interfaces, and packages.
 - Remember that the name of a package is part of the name the caller uses to to
   refer to it, so make use of that.

And an example:

#+BEGIN_SRC go 
type Person struct {
	Name string
	Age  int
}

// AverageAge returns the average age of people.
func AverageAge(people []Person) int {
	if len(people) == 0 {
		return 0
	}

	var count, sum int
	for _, p := range people {
		sum += p.Age
		count += 1
	}

	return sum / count
}
#+END_SRC

In this example, the range variable =p= is declared on line 10 and only referenced
once, on the following line. =p= lives for a very short time on the page and in
limited scope during the execution of the function. A reader who is interested
in the effect values of =p= have on the program need only read the three loop’s
three lines.

By comparison =people= is declared in the function parameters, is live for the
body of the function, and is referenced three times over seven lines. The same
is true for =sum=, and =count=, thus they justify their longer names. The reader has
to scan a wider number of lines to locate them so they are given more
distinctive names.

I could have chosen =s= for =sum= and =c= (or possibly =n=) for =count= but this would
have reduced all the variables in the program to the same level of importance. I
could have chosen p instead of people but that would have left the problem of
what to call the =for …​ range= iteration variable and the singular =person= would
look odd as the loop iteration variable which lives for little time has a longer
name than the slice of values it was derived from.

#+BEGIN_NOTE
Use blank lines to break up the flow of a function in the same way you use
paragraphs to break up the flow of a document. In =AverageAge= we have three
operations occurring in sequence. The first is the precondition, checking that
we don’t divide by zero if people is empty, the second is the accumulation of
the sum and count, and the final is the computation of the average.
#+END_NOTE

*** Context Is Key (No Not That Context)
It’s important to recognise that most advice on naming is contextual. Naming is
always going to be a guideline. Trying to make rules about naming things just
leads to the rules being ignored until right before code is pushed up and the
developer spends half an hour re-naming things using their IDE's refactoring tools.

What is the difference between two identifiers, =i=, and =index=. We cannot say
conclusively that one is better than another.

Take this loop, for example:

#+BEGIN_SRC go
for index := 0; index < len(s); index++ {
	//
}
#+END_SRC

Is that fundamentally more readable than:

#+BEGIN_SRC go
for i := 0; i < len(s); i++ {
	//
}
#+END_SRC

We'd argue it isn't, because it is likely the scope of =i=, and =index= for that
matter, is limited to the body of the =for= loop and the extra verbosity of the
latter adds little to /comprehension/ of the program.

However, which of these functions is more readable?

#+BEGIN_SRC go
func (s *SNMP) Fetch(oid []int, index int) (int, error)
#+END_SRC

versus

#+BEGIN_SRC go
func (s *SNMP) Fetch(o []int, i int) (int, error)
#+END_SRC

In this example, =oid= is an abbreviation for SNMP Object ID, so shortening it to
=o= would mean programmers have to translate from the common notation that they
read in documentation to the shorter notation in your code. Similarly, reducing
=index= to =i= obscures what =i= stands for; in SNMP messages a sub value of each OID
is called an Index.

#+BEGIN_NOTE
Dont' mix and match long and short formal parameters in the same declaration.
#+END_NOTE

*** A Variable's Name Should Describe Its Contents
You shouldn’t name your variables after their types for the same reason you
don’t name your pets "dog" and "cat". You shouldn’t include the name of your
type in the name of your variable’s name for the same reason.

The name of the variable should describe its contents, not the type of its
contents. Consider this example:

#+BEGIN_SRC go
var usersMap map[string]*User
#+END_SRC

What’s good about this declaration? We can see that its a map, and it has
something to do with the =*User= type, that’s probably good. But =usersMap= is a
map, and Go being a statically typed language won’t let us accidentally use it
where a different type is required. The =Map= suffix is redundant from the point
of view of the compiler. Hence utility of the suffix is entirely down to whether
we can prove it is of use to the reader.

Now, consider what happens if we were to declare other variables:

#+BEGIN_SRC go
var (
        companiesMap map[string]*Company
        productsMap  map[string]*Products
)
#+END_SRC

Now we have three map type variables in scope, =usersMap=, =companiesMap=, and
=productsMap=, all mapping strings to different types. We know they are maps; it’s
right there in their declaration. We also know that their map declarations
prevent us from using one in place of another—​the compiler will throw an error
if we try to use =companiesMap= where code was expecting a =map[string]*User=. In
this situation it’s clear that the =Map= suffix does not improve the clarity of
the code, its just extra boilerplate to type.

Our suggestion is to avoid any suffix that resembles the type of the variable.

This advice also applies to function parameters. For example:

#+BEGIN_SRC go
type Config struct {
  // lots of fields go here
}

func WriteConfig(w io.Writer, config *Config)
#+END_SRC

Naming the =*Config= parameter =config= is redundant. We know its a =*Config=, it says
so right there.

In this case consider =conf= or maybe =c= will do if the lifetime of the variable is
short enough.

If there is more that one =*Config= in scope at any one time then calling them
=conf1= and =conf2= is less descriptive than calling them =original= and =updated= as
the latter are less likely to be mistaken for one another.

#+BEGIN_NOTE
Don’t let package names steal good variable names.

The name of an imported identifier includes its package name. For example the
=Context= type in the =context= package will be known as =context.Context=. This makes
it impossible to use =context= as a variable or type in your package.

=func WriteLog(context context.Context, message string)=

Will not compile. This is why the local declaration for =context.Context= types is
traditionally =ctx=. eg.

=func WriteLog(ctx context.Context, message string)=
#+END_NOTE

*** Hiding In Plain Sight
This is a tip from [[https://www.youtube.com/watch?v=Ic2y6w8lMPA][Kate Gregory]]. Sometimes you’ll find a better name for a
variable hiding in a comment.

#+BEGIN_SRC go
// registry of SQL drivers
var registry = make(map[string]*sql.Driver)
#+END_SRC

The comment was added by the author because =registry= doesn’t explain enough
about its purpose—​it’s a registry, but a registry of what?

By renaming the variable to =sqlDrivers= its now clear that the purpose of this variable is to hold SQL drivers.

#+BEGIN_SRC go
var sqlDrivers = make(map[string]*sql.Driver)
#+END_SRC

Now the comment is redundant and can be removed.

*** Use A Consistent Naming Style
Another property of a good name is it should be predictable. The reader should
be able to understand the use of a name when they encounter it for the first
time. When they encounter a /common/ name, they should be able to assume it has
not changed meanings since the last time they saw it. You could also say that a
good name should feel familiar.

For example, if your code passes around a database handle, make sure each time
the parameter appears it has the same name. Don't use a combination of
=d *sql.DB=, =dbase *sql.DB=, =DB *sql.DB=, and =database *sql.DB=. Rather, consolidate
on the following:

#+BEGIN_SRC go
db *sql.DB
#+END_SRC

...and use it consistently across parameters, return values, local declarations,
and potentially receivers. Doing so promotes familiarity; if you see a =db=, you
know it’s a =*sql.DB= ( or at least something that acts like one ) and that it has
either been declared locally or provided for you by the caller.

Similar advice applies to method receivers; use the same receiver name every
method on that type. This makes it easier for the reader to internalize the use
of the receiver across the methods in this type. 

#+BEGIN_NOTE
The convention for short receiver names in Go is at odds with the advice
provided so far. This is just one of the choices made early on that has become
the preferred style, just like the use of =CamelCase= rather than =snake_case=. It
also has some logic to it, as the identifier for a reciever will be seen many
more times, allowing developers to internalize that (for example) =c= means
=*Client=.

[[https://github.com/golang/go/wiki/CodeReviewComments#receiver-names][The Go Code Review]] style dictates that receivers have a one or two letter name, or
acronyms derived from their type. You may find that the name of your receiver
sometimes conflicts with name of a parameter in a method. In this case, consider
making the parameter name slightly longer, and don’t forget to use this new
parameter name consistently.
#+END_NOTE

Finally, certain single letter variables have traditionally been associated with
loops and counting. For example, =i=, =j=, and =k= are commonly the loop induction
variable for simple =for= loops. =n= is commonly associated with a counter or
accumulator. =v= is a common shorthand for a value in a generic encoding function,
=k= is commonly used for the key of a map. =a= and =b= are generic names for
parameters comparing two variables of the same type. =x= and =y= are generic names
for local variables created for comparision, and =s= is often used as shorthand
for parameters of type string.

As with the =db= example above programmers /expect/ =i= to be a loop induction
variable. So ensuring that =i= is always a loop variable, and not used in other
contexts outside a =for= loop saves everybody time and headaches. When readers
encounter a variable called =i=, or =j=, they know that a loop is close by.

#+BEGIN_NOTE
 If you found yourself with so many nested loops that you exhaust your supply of
=i=, =j=, and =k= variables, its probably time to break your function into smaller
 ones.
#+END_NOTE

*** Use A Consistent Declaration Style
Go has at least six different ways to declare a variable

 - ~x := 1~
 - ~var y = 2~
 - ~var z int = 3~
 - ~var a int; a = 4~
 - ~var b = int(5)~
 - ~c := int(6)~

This list does not include receivers, formal parameters and named return
values. There are probably plenty more that we haven’t thought of.

This is something that Go’s designers recognise was probably a mistake, but its
too late to change it now, and, they argue, the bigger problem is
shadowing. With all these different ways of declaring a variable, how do we
avoid each Go programmer choosing their own style?

In Go each variable has a purpose because each variable we declare has to be
used within the same scope. Here is a suggestion for how to make the purpose of
each declaration clear to the reader. This is the style we should try to use
where possible.

*** Prefer either =var= or ~:=~ for declaring and initializing, respectively
:PROPERTIES:
:ID:       fad3dbd8-5df7-4c45-9a98-ccdca80342db
:END:

When declaring a variable that will be explicitly initialised later, use the var keyword.

#+BEGIN_SRC go
var players int    // 0

var things []Thing // an empty slice of Things

var thing Thing    // empty Thing struct
json.Unmarshall(reader, &thing)
#+END_SRC

The =var= acts as a clue to say that this variable has been /deliberately/ declared
as the zero value of the indicated type. This is also consistent with the
requirement to declare variables at the package level using /var/ as opposed to
the short declaration syntax.

Later on we'll be making the case that you shouldn't use package-level variables
at all, as well.

When declaring /and/ initialising the variable at the same time — ​that is to say
we’re not letting the variable be implicitly initialised to its zero value — we
recommend using the short variable declaration form. This makes it clear to the
reader that the variable on the left hand side of the ~:=~ is being deliberately
initialised to the expression on the right.

*** Explanations & Examples
Let's take that example from the section above, and walk through how we end up
at our two rules of only using =var= for uninitialized values and ~:=~ for values
that need to be initialized.

So let's start by taking the example, and being as explicit as possible about
initializing each variable:

#+BEGIN_SRC go
var players int = 0

var things []Thing = nil

var thing *Thing = new(Thing)
json.Unmarshall(reader, thing)
#+END_SRC

In the first and third examples, because in Go there are no automatic
conversions from one type to another; the type on the left hand side of the
assignment operator /must/ be identical to the type on the right hand side. The
compiler can infer the type of the variable being declared from the type on the
right hand side, to the example can be written more concisely like this:

#+BEGIN_SRC go
var players = 0

var things []Thing = nil

var thing = new(Thing)
json.Unmarshall(reader, thing)
#+END_SRC

This leaves us with explicitly initialising =players= to =0= which is redundant
because =0= is =players= zero value. So it’s better to make it clear that we’re
going to use the zero value by instead writing

#+BEGIN_SRC go
var players int
#+END_SRC

What about the second statement? We cannot elide the type and write

#+BEGIN_SRC go
var things = nil
#+END_SRC

Because =nil= does not have a type. Instead we have a choice, do we want the zero
value for a slice?

#+BEGIN_SRC go
var things []Thing
#+END_SRC

or do we want to create a slice with zero elements?

#+BEGIN_SRC go
var things = make([]Thing, 0)
#+END_SRC

If we wanted the latter then this is /not/ the zero value for a slice so we should
make it clear to the reader that we’re making this choice by using the short
declaration form:

#+BEGIN_SRC go
things := make([]Thing, 0)
#+END_SRC

Which tells the reader that we have chosen to initialize =things= explicitly.

However, this is still a bit long, and we can shorten it up quite a bit:

#+BEGIN_SRC go
things := []Thing{}
#+END_SRC

That lets any other developers who come along know that we wanted an empty slice
and *not* the zero value for a slice ( ie, =nil= ). That said, most of the time the
difference between an empty slice and a nil slice is academic as we usually
immediately do something with the slice. In other words, we usually follow it up
with something like this:

#+BEGIN_SRC go
  things := []Thing{}
  err = json.Unmarshal(bits, &things)
#+END_SRC

So we fall back to "we want to declare but not initialize", as =json.Unmarshal= is
what's /actually/ initializing the variable with a value. So most of the time
=var things []Thing= is fine.

This brings us to the third declaration,

#+BEGIN_SRC go
    var thing = new(Thing)
#+END_SRC

Which is both explicitly initialising a variable and introduces the uncommon use
of the =new= keyword which some Go programmer dislike. If we apply our short
declaration syntax recommendation then the statement becomes

#+BEGIN_SRC go
thing := new(Thing)
#+END_SRC

Which makes it clear that thing is explicitly initialised to the result of the
expression =new(Thing)= -- a pointer to a =Thing= -- but still leaves us with the
unusual use of =new=. We could address this by using the compact literal struct
initialiser form:

#+BEGIN_SRC go
thing := &Thing{}
#+END_SRC

Which does the same as =new(Thing)=, hence why some Go programmers are upset by
the duplication. However this means we’re explicitly initialising =thing= with a
pointer to the literal =Thing{}=, which itself is the zero value for a =Thing=.

Instead we should recognise that thing is being declared as its zero value and
use the address of operator to pass the address of thing to =json.Unmarshall=

#+BEGIN_SRC go
var thing Thing
json.Unmarshall(reader, &thing)
#+END_SRC

*** Avoid =make= and =new= when possible
[[https://dave.cheney.net/2014/08/17/go-has-both-make-and-new-functions-what-gives][This article goes more in-depth]], but to pull out the summary:

#+BEGIN_QUOTE
=make= and =new= do different things.

If you are coming from another language, especially one that uses constructors,
it may appear that =new= should be all you need, but Go is not those languages,
nor does it have constructors.

My advice is to use =new= sparingly, there are almost always easier or cleaner
ways to write your program without it.

As a code reviewer, the use of =new=, like the use of named return arguments, is a
signal that the code is trying to do something clever and I need to pay special
attention. It may be that code really is clever, but more than likely, it can be
rewritten to be clearer...
#+END_QUOTE

Additionally, using =make= can lead to unexpected bugs when used to initialize
slices & arrays with a non-zero length. What does the following code output:

#+BEGIN_SRC go
  func main(){
    toChange := []string{"one","two","three"}
    list := make([]string, len(toChange))
    for i := 0; i<l; i++ {
      list = append(list, strings.Repeat(toChange[i], i+1))
    }

    fmt.Printf("values: %v\n", strings.Join(list, " - "))
  }
#+END_SRC

Did you guess this:

#+BEGIN_SRC shell
values:  one - twotwo - threethreethree
#+END_SRC

Because what it actually prints out is this:

#+BEGIN_SRC shell
values:  -  -  - one - twotwo - threethreethree
#+END_SRC

Because the value of =list= after it's initialized by =make= is =[]string{"","",""}=
-- because =make= fills in the slice with the zero value for that slice. So,
rather than using make, use  =var list []string= when initializing an empty slice.

*** Exceptions To The Rule
Of course, with any rule of thumb, there are exceptions. For example, sometimes
two variables /of the same type/ are closely related so writing

#+BEGIN_SRC go
var min int
max := 1000
#+END_SRC

would look odd. The declaration may be more readable like this

#+BEGIN_SRC go
min, max := 0, 1000
#+END_SRC

However, we'd recommend not initializing more than two ( maaaaybe three )
variables in this manner.

*** Make Tricky Code /Look/ Tricky
Make tricky declarations obvious!

When something is complicated, it should look complicated.

#+BEGIN_SRC go
var length uint32 = 0x80
#+END_SRC

Here length may be being used with a library which requires a specific numeric
type and is more explicit that =length= is being explicitly declared to be =uint32=,
rather than using the short declaration form:

#+BEGIN_SRC go
length := uint32(0x80)
#+END_SRC

In the first example we're deliberately breaking the rule of using the =var=
declaration form with an explicit initialiser. This decision to vary from the
usual form is a clue to the reader that something unusual is happening.

However, such cases should usually have a comment that explains /why/ this
complexity is required.

*** Summary

 - When declaring a variable without initialisation, use the =var= syntax.
 - When declaring and explicitly initialising a variable, use ~:=~.

We've talked about a goal of software engineering is to produce maintainable
code. Therefore you will likely spend most of your career working on projects of
which you are not the sole author. Our advice in this situation is: follow the
local style.

Changing styles in the middle of a file is jarring. Uniformity, even if its not
your preferred approach, is more valuable for maintenance over the long run than
your personal preference. The rule we should all try to follow is; if it fits
through =go fmt= then it’s usually not worth holding up a code review for.

Additionally, there are tools such as [[https://github.com/rinchsan/gosimports][gosimports]] (not =goimports= ), [[https://github.com/mvdan/gofumpt][gofumpt]], and
[[https://golangci-lint.run/][golangci-lint]] that we can use to try and catch some of these things before a
code review. As we haven't figured out a Jane-wide set of tools -- or the
configurations for each of those tools -- yet, for now use your best judgement.

#+BEGIN_TIP
If you want to do a renaming across a codebase, do not mix this into another
change. If someone is using git bisect they don’t want to wade through thousands
of lines of renaming to find the code you changed as well.
#+END_TIP
 
